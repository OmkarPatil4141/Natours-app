🫵In nodejs every single file is treated as module
🫵Module is object that we have access to in each and every node js module

NPM packages follows semantic version notation three digit --> major version , minor version and patch version
so new version may affect the code if our code is written in old version.

so we can check packages which are deprecated by command  -------------> npm outdated 
this command will display table of outdated packages.
Package  Current Wanted Latest  Location
slugify   I.O.O  1.3.4   1.3.4


we can also download the specific version of any package using -------------> npm i slugify@1.0.0

✅ Instead of ^ (minor and patch releases) this symbol we can use ~ symbol for strictly that patch version which is safe side * symbol bumps all the versions

✅ We can update package by npm update slugify 
✅ We can delete any package by npm uninstall slugify
✅ Package.lock.json file contains info about dependancies of dependancies along with versions
✅ Whenever we share our code must provide Package.lock.json and Package.json file
______________________________________________________________________________________________________________________________________

✅ Event loop does the orchestration means it receives events , calls there call back functions, and offloads there more expensive tasks to the thread pool, event loop that makes asynchronous programming possible in node

1.nexttick()
2.setImmediate()   -> it depends on polling phase 
3.setTimeout()

/We can change the size of thread pool from 4 to requied
process.env.UV_THREADPOOL_SIZE = 1 ; //we have decreased it from 4 to 1
______________________________________________________________________________________________________________________________________

Nodes event driven architecture

Event emmiter ---------------------> Event listner -------> callBacks
		emits event 			     calls 
______________________________________________________________________________________________________________________________________

Streams :
✅ When we read files using Streams , we read part of the data do something with it and free our memory , we repeat this
until the entire file processing e.g. youtube and netflix follows the same principle --> Instead of loading full videos 
process by piece by piece

✅ Steams are useful for handling large volumes of data

✅ More efficient in terms of  memory 
✅ Streams are instances of EventEmmiter class

______________________________________________________________________________________________________________________________________'

✅ require functions is called with a module name as the argument the path to the modules file has been resolved into
  file loaded all the code has been wrapped into wrapper function which has then executed after execution it will 
  return exports of required module then after first time loading they are cached 

______________________________________________________________________________________________________________________________________
Callback hell is just a problem with nested callbacks we can resolve these problem using 
promises so promises are just like packages which are filled in future means when we are getting 
data in future in beginning we have promise but it is pending promise once we get data in it
it becomes resolved promise .

✅ resolved promise eighter can be fullfilled(it have our required data)or rejected(it have error)
✅ .then(callback) it only deals with fullfilled promises for rejected we have to use catch method
______________________________________________________________________________________________________________________________________
✅ Building promises
   1. we will return new Promise(resolve,reject) reject have error and resolve(data) this data is then available
   in then(data=>{}) means resolve getting data passes to then
   2. if(err) reject("error") whatever in reject then it available to catch(err)
______________________________________________________________________________________________________________________________________
✅ Instead of consuming promises with then method , we can use async await 
✅ async await is also known syntactic sugar for promises
✅ await always used inside the as function
✅ Async function returns promises , in order to display we use then method and for error we use catch method but in trys catch we have 
	to throw error
✅ Async functions runs in background while other code is in event loop 
______________________________________________________________________________________________________________________________________
✅Express do not put body dat on to request, hence we have to use middleware
✅Middleware is just a function that can modify the incoming request data , its called middleware because it stands 
  between middle in req and res.
✅ Object.assign({},{}) which allows us to create a new object by merging two existing objects
✅ app.get('/api/vl/tours/:id, (req, res) => {
     console. log ( req. params),}) 
✅Params ->object that  all the parameters of all the variables we defined there are stored (:id in above code )

✅ We can add also optional parameters /:id? now id becomes option means whenever we hitting url we can or cannot specify id
✅ In javascript if we have one string which is numberer e.g "45" that when multiply with 1 e.g. "45"*1 => 45

✅ For updating we have 2 methods put and patch
   put -> we expect that our application recieves entire new upsated object 
   patch -> we only expect th properties that actually be updated on object
______________________________________________________________________________________________________________________________________


✅ We can refactor our routes -> app.route().get(------)
✅ middleware -> request rsponse cycle , starts with incoming request then executing all the middleware
    in the middleware stack step by step (.next()) and finally sending the response to finish the cycle 

✅   Order lots matter in ✅Express becuse when we put our custom middleware below route it ends req-res cycle
      means when we keep custom middleware in between gettours and by id 

✅ e.g we require Date at one of the route then we use middleware to fetch the date from req and then use it in route 
✅ middlewares are executed in the sequence they are defined
______________________________________________________________________________________________________________________________________
Third party middleware function called morgan
✅ It allows us to see request data right in console 

✅ mounting => in order to use it in different files

const tourRoute = express.Router(); // one separate route for each resource
const UserRoute = express.Router();
app.use('/api/v1/tours',tourRoute)
app.use('/api/v1/users',tourRoute)

✅ When we use exports. and them we require it in another file we get all that multiple exports in one object
    {so we can destructure it by same names } or we can use that object.name

 ✅WE can keep only middlewares in our app.js 
 1->take routes from app.js make them middleware using mounting
 2-> put them in routes folder (run and check whether everything is working properly)
 3->  take all route handlers and make another folder as controller
 4->  paste and export them
 5-> require them in routes
 6-> create server .js in which put all the server/db related things 
 7-> export our app from app.js (because we keep all the things related to expreess in app)
 ✅ Param middleware is the middleware that only runs with certain parameters
    in Param middleware function we actually get access to a fourth argument which is the 
    value of parameter in question

______________________________________________________________________________________________________________________________________
✅ These is known as chaining middlewares ->
    router.route('/').get(tourController.getTours).post(tourController.createTour)
    if we want to add middleware for any perticular method e.g. post(), then 
    just add as a first parameter e.g. post(middlewarefunction ,tourController.createTour)

✅ we can serve static files from a folder from not a route then we have to use inbult middleware as

   app.use(express.static('dir_name'))  for each part of website there is different request

✅ environment variables : NODE ENV=development nodemon server. js
   instead of keeping all environment in command we can keep them in one file
   1. create file
   2. put variables in it
   3. npm i dotenv
   4. require dotenv and 


✅ npm i eslint prettier eslint-config-prettier eslint-plugin-prettier eslint-config-airbnb eslint-plugin-node eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react --save-dev
______________________________________________________________________________________________________________________________________________________________________________________________________

🔥Mongoose
✅ Mongoose is object data modelling (ODM) library for MongoDB and Node js , gives higher level of abstraction
✅ Mongoose allows for rapid and simple development of mongodb datdabase interactions
✅ Featues : 1.schemas to model data and relationships 
              2. Easy data Validation
              3. simple query API
              4.middleware etc   
✅ Mongoose schema : where we model our data by describing the structure of the data , default values and Validation

✅ Mongoose -> models (to create model we requires schema) -> blueprints -> we use to create document
_____________________________________________________________________________________________________________________________________
✅ We can create document by two ways 
1. schema , model , save({});
2. model.create({});

✅ If we trying to do add more fields than schema the it will simply ignores that field
   and add only specified fields.

✅ req.query() --> gives us the object which we passed as a query #express functionality

✅ In mongoose there are two ways to writing database queries
   1. using filter object
   2. using some special mongoose methods

✅ If we have to create shallow copy of a object then we can simply destructure the object 
      e.g const newShallowCopyObj = {...req.query};

✅ Query.prototype() means we query chya instance s vr methods apply kru shkto 
      mhnun we use karu shkto different methods mhnje ch chaining

✅ In order to use chain multiple methods we build the query first and then execute it
_____________________________________________________________________________________________________________________________________

✅Aggregation pipeline -> powerful framework for data Aggregation
   All documents from certain colection passes through pipeline inorder to transform
   them into a aggreagate results
   e.g we can use it to calculate Average , min and max values

_____________________________________________________________________________________________________________________________________
✅ Virtual properties are the fields that we can define on our schema but that not will persisted
      so that will not be saved into database
✅ Used for the fields that can be derived from one another e.g.  conversion of miles to KM

✅ We use regular functions in mongoose because ()=> arrow function does not have access to
      to this keyword , and this is referes to current document in this functions 
✅ we can use it along with schema defination{} ,{toJSON:{virtuals:true},toObject:{virtuals:true}}schema options
✅ We cannot use Virtual property in queries ass they are not part of database
_____________________________________________________________________________________________________________________________________
✅ document middleware -> pre and post 
   1.pre ('hookName',function(next)) we have access to current doc by this
   2. post ('hookName',function(doc,next)) we have access to document directly
//DOCUMENT middleware : runs after only .save(), .create()
tourSchema.post('save',function(doc,next) {
    console.log(doc);
    next();
});

_____________________________________________________________________________________________________________________________________
✅ Query middleware -> pre and post query execution 
      we have access to query object
✅ Aggregation middleware -> pre and post means before Aggregation and after Aggregation

      we simply have to use in all of the Aggregations so we can simply not copy paste at all places
_____________________________________________________________________________________________________________________________________

✅ Data Validation in mongoose  on data coming from model
    it is process of checking entered values are in right format in each field for our document schema and that values
    actually been entered for all the required fields.

✅ Sanitization : which is to ensure that the inputted data is is basically clean , i.e. there is no malicious
    code injected in database, means never ever accept the inpputted data as it is from users

_____________________________________________________________________________________________________________________________________
✅error handling:-

✅ 1. Undefined routes :-> app.all('*', (req,res,next)) for all routes that we mention after actual  routes at last 
      (same as Angular)..

✅ 2. For express we write global express erro handling middleware which will handle all errors
         coming from all over application (central err handling middleware)
   🔥 whenever we pass argument to next(''), express will automatically know that there ways  
      an an error and that applies to every next function in every next middleware
      so it will assume that there is error and it will skip all the middlewares in stack and sent error
      that we passed to our global handling middleware(mhanje jith parameter ala tithun direct flow towrads global middleware)


✅ Instead of creating own error we can create our own Err class as a good practice
✅ stackStrace gives info that where the error happens

_____________________________________________________________________________________________________________________________________
✅ We are not making mongoose errors as isOPerational but we have to make them operational 
     to make them more clear
   we will destructure the err object and make ir operational
_____________________________________________________________________________________________________________________________________

✅ Unhandled rejections :
    whenever Unhandled rejection somewhere in our application the process object will emmit the object called Unhandled rejection
    so we can subscribe to that event 
   
✅ Whenever we have any issue with database connection our application is not gonna work so we can simply
    so we can do here shutdown our application by process.exit(0/1) 0 is for suceess and 1 for uncaught exception
    so 1) we can shutdown the server first and then 2) we can use  process.exit(1) (1 for uncaught exception)

_____________________________________________________________________________________________________________________________________
✅ Authentication and authorization :->
    1] created user schema
    2] separate route for signup which is not in rest architecture
    3] validator for confirm password
    4] Encryption of password using pre save middleware and using bcryptjs(returns a promise) package it gonna add random string to the password
         so that two equal passwords do not same hash.
    5] JWT : it is a stateless solution for authetication so there is no need to store any session state on the server
               (restful apis are always be stateless)
      
      Working of JWT :
      1)users client starts by making a post request 






_____________________________________________________________________________________________________________________________________

✅ 1)Instead of creating user by simply just req body as it is we get security flaw as everyone log in as a admin so we can 
   change code  const newUser =  await User.create(req.body) ❌ 

 ✅ jsonwebtoken package mainly contains two methods as :
      1)jwt.sign('payload','secret',(when the jwt will expire ....{}))  config.env is a perfect place to 
      to mention our secret while mentioning secret it is imp that using the standard HSA 256 Encryption for the signature 
      secret should at least be 32 characters long

✅2) Checking on /login whether password and email is correct or not and if correct then we are sending token 
      and also implemented /getUsers. For checking password we can use bcrypt twice means on non encrypted one we can 
      do it in userModel.  we are using instance method so an instance method is a method that is gone be available
      on on all documents of a certain collection 
      userSchema.methods.correctedpass()  -> here select:false for password hence we dont use this.password

✅ 3) Protected route 1 before user request getallTours we have to check he is logged in or not  so before it we can use
      mmiddleware before each handlers in that middleware we are 1] getting token and check of its there
      2] validate token  (verify that token) 3] check user that accessing route still exist 4] check if user changed
      password after token was issued
      👉Common practice to send a token using http header with request -> so we use key:Authorization and value as
         Bearer 456wyuhkmfwpouqwflwurgcb  it is standard for token and for token value we use split
_____________________________________________________________________________________________________________________________________
✅ 1) completing Protected route function :->
      2] verify the token : we can use jwt.verify(token[means payload], secret, (callback)) verify is a asynchronous function
            we are using built in promisify function , in order to use it we have to use util module
            result of this is decoded payload from JWT
         ✅ We get JsonWebTokenError so we can handle that error in err controller
         ✅ We get JsonWebTokenError so we can handle that error in err controller
      
      3]what if user is deleted but its token still exist:
            simply we find that user using findbyid and id is we have in payload
      
      4] If the password changed after token issue so we can use instance method and we are creating new field in model to store the password

      2) Advance Postman setup:
         We can specify couple of variables for each of environment e.g. url
         We also write js scripts in test section
      
      3) Authorization:
         ✅ We can authorize certain type of users to acess something means it verifies certai user have the rights or not inorder to access something

         ✅ lets implelment middleware function that certian user role can delete tours 
            1. we can implelment 2 middlewares one for checking admin is logged in or not and second for it is admin or not

_____________________________________________________________________________________________________________________________________

1) Password reset : 
   ✅ First of all user send a post request to forgot password route only with this email address this will then  
         create a reset token(not a JWT token) sent it to email address provided 
      1. we will fetch user based on email and check that exist or not 
      2. we create a reset token( use instance method ) using crypto module crypto.randomBytes(32).toString('hex') //32 :length of token and then
         converting to hexadecimal string   
2)  User sends that token from his email along with a new password in order to update his password
      1. In utils folder create a function for how to send mail in node js using nodemailer
         1. we have to create a transporter => it is a service that actuallly send an email e.g. GMAIL but we are not going to use 
            gmail for production apps because there is limit on mails and if we exceed limit then they treat us as spammer
         2. we need to define email options 
         3. actual send the email with nodemailer

3) setting a new password based on reset token:
      //1) get user based on token
       // 2) only if token has not expired and there a user then set new password
       // 3) update changedPasswordAt property for user 
    // 4) Log the user in , send JWT 

4) A logged in user to update his password without having to forget it:

   //1) Get the user from collection 
    //2) Check if POSTED current password is corrrect 
    //3) if so, update the password
    //4) log user in , send JWT 

    ✅ We do not use findbyIdAndUpdate because it will not work on custom validators in schema
_____________________________________________________________________________________________________________________________________
1) Allow user to manipulate user data:(in userController)  => user itself can change only name and email
   1) create errro if user posts Password data
   2) Fitered out unwanted fields names there are not allowed to updated (because anyone can change role there)
   3) update user document

2) Allow user to delete itself : we are not deleting document from database we simply deactivate it so in future user can login
            1) we are creating active field and setting it upto false
            2) using qury middleware we are not showing that user in getUsers

3) Security practices that we have to follows
4) Sending JWT via Cookie :

   Cookie: Cookie is small piece of text that a server can send to clients then when clients recieves a cokkie
            it will automatically store it and automatically send it along with all future requests to user and 
            so again browser automatically stores Cookie and sends it back to all future requests to that server
             where it can came from

5) Rate limiting : prevent  to many request from same ip 
      1) we can implement as a global middleware if too many requests from same IP then block that request
         we are using npm i express-rate-limit for it 

6) setting important secuity http headers using a npm i helmet which is also middlewarefunction 

7) Data Sanitization : 1) npm i express-mongo-sanitize
                        2) npm uninstall xss
8) preventing parameter pollution: express make array of query parameters and we cannot apply split on it
                  so prevent it npm i hpp   => http parameter pollution to delete duplicate fields
                  {{URL}}api/v1/tours?sort=duration&sort=price  it will simply take last one means tours sort by 
                  price only
_____________________________________________________________________________________________________________________________________

👊 Advance Mongoose Section :-

1) Types of relationships between data :
   a) 1:1  ->  1 movie -> 1 name
   b) 1:many 1) 1:few ---------> 1 movie: few award
             2) 1:many --------> 1 movie : many reviws
             3) 1:ton ---------> 1 app : ton logs

   c) many:many  -> movie : actors


2) ✅Referencing <SQL>  vs ✅Embedding <NOSQL>
   a) In a Referenced (child Referencing) form we keep two related datasets and  all the documents separated

   b) In No-SQL databases we simply denormalize data simply by Embedding documents into the main document
      (✅ this will help to increase our performance 
                  BUT
         ❌ We cant query the embedded data but requirement of our application to query so we have to use normalized design
      )

3) When to embed and when to denormalize it will be decided in three of steps combinly

                                        🫵Embed                                   🫵Reference
   1.relation type                         1:1                                         1:many
                                           1:many                                      1:ton
                                                                                       many:many

   2. Data access patterns                 a) Data is mostly read                 a) Data is updated a lot
                                           b) Data does not change quickly        b) low read/write ratio
                                          c) high read/write ratio
                                            (more reading than writing)

   3. Data closeness                      Dataset really belonging together         we frequently need to query 
                                                                                    both datasets on their own


4) Types of Referencing 

      a) child Referencing                          b) Parent Referencing                      c) Two way Referencing

         ✅ best for 1:few                          ✅ best for 1:ton                       ✅ best for many:many
         ✅ for 1:Many can exceed max               ✅ best for 1:many
            doc size which is 16MB

5) 👊 The Natours data model :

      Entity Set:  User, tours, bookings reviews, Locations

      relationships : 1) user to reviews  1: many  -> means 1 user can give many reviews and we can use parent Referencing
                         means our parent is user and each review is child and each review contais id pf user(parent)

                     2) tour to reviews  1: many 
                     3) tours to Locations   -> few : few means many : many and we use Embedding in tours we embed Locations as there are 
                                                                        few Locations
                     4) tours to users -> few to few  --> we have role as guide 
                        tour can have few users (guides) and a tour guide can also be guiding  a few tours 
                        ✅Eighter we can use embedding or child Referencing

                     5) tours to bookings  1:many  one tour have many bookings -->   parent Referencing

                     6) users to bookings   1:many  one user have many bookings     --> parent Referencing

6) geospetial 

      Our Location data embedded into tours hence we can declare everything related to Locations in tour
      ✅ geospetial data is the data that describes places on earth using longitude and latitude coordinates

         Inorder to use geospetial data we have to create a object with atleanst two fields  
         startLocation:{
        //GeoJSON 
        type:{
          type:String,
          default:'Point',
          enum:['Point'] 
        },
        coordinates:[Number]
        }

         ✅ Inorder to embed docs we have to create an array e.g. locations

7)Embed user documents into tour document -> guides array in schema and ---> pre middleware for saving

8) lets keep tour and user two separate entities in database by just Referencing
   we expect the type of each element in guide array is to be mongoDB ID and just ref:'User'  and we do not require
   even User imported 

   _____________________________________________________________________________________________________________________________________
    1) Using populated process inorder to get tour guides whenever we query for a certain route
        a) in this process result will show like embedded document but there is just a Reference and data in different
         document.
         b) we have to use it in query is .populate e.g
         await Tour.findById(req.params.id).populate({
            path:'guides',
            select:'-__v -passwordChangedAt'
        });

         c) we used only on getTour so inorder to use it for gettours we use it in query middleware
   
   2) created a Review model with reference with user and tour

   3) a)getAllReviews and createReview are two controllers 
      b)the we created routes for these endpoints
      c)we mount that router in app.js
      d)for create we used protect and restrictTo(user) controllers 
   
   4) populate the reviews -> as we have two references tour and user we have to populate it twice

   5) virtual populate :->
      for each tour we can do child referencing we can keep array of reviews but that array can grow 
         indefinitely (review madhe tour aal pn tour madhe review aal phije)
      So with virtual populate we have can populate all reviews for certain tour without keeping an array

_____________________________________________________________________________________________________________________________________

🫵 Creating Nested routes
   
   1) lets create a simple nested route : when we creating a new review we can manually give tour id and user id but
      so in real world user id should come from logged in user and tour id from current tour
      POST  /tour/id_tour/reviews
      GET  /tour/id_tour/reviews
      GET  /tour/id_tour/reviews/review_id

      so we have to create this routes in tourRoutes and upto /tour we have already mounted
   
   2) As we created a review route in tour route so we can use mergeparams the Advance mongoose feature 
     we simply import review router in tour and then => router.use('/:tourId/reviews',reviewRouter)
     and to access tourId =>  const router = express.Router({mergeParams:true})

   3) lets create a nested get endpoint

   4) Building Handler factory function: delete , get create ans all
         hadler function to delete review documents but also documents from other other collections all with 
         one simple function
_____________________________________________________________________________________________________________________________________

1) implementing /me route in which just add one middleware, add route  and call getuser controller

2) Fix some auth and auth in some resources

3) importing dev data and testing Apis

4) Increasing read performance by indexes 
   a)  const doc = await features.query.explain(); when we add explain the in post man it give 
                   "executionStats": {
                    "executionSuccess": true,
                    "nReturned": 3,
                    "executionTimeMillis": 0,
                    "totalKeysExamined": 0,
                    "totalDocsExamined": 9,}

                    object in which for query output it will reviewing all the tours it will reduce read performance
                    so we can use concept of indexes

         b)by default mongo uses _id as ordered index so whenever we query mongo will search through this 
                     ordered index

          c) so we are going to apply index on price --> tourSchema.index( { price:1 } )

                  now below result is after applying query

                     "executionStats": {
                    "executionSuccess": true,
                    "nReturned": 3,
                    "executionTimeMillis": 1,
                    "totalKeysExamined": 3,
                    "totalDocsExamined": 3,}
           d) We can also create compound indexes also, but there is same no attribute in  compound and indivisual attribute
_____________________________________________________________________________________________________________________________________

1) lets calculate the Average rating because we have to calculate it whenever we got new rating or anyy one update or delete rating 
   we are going to use statics method in this method this refers to current model

2) we are calculating review statstics for delete and update in reviews
   a) for findOneAnd we dont have access to document but we have access to query so using that query we can get 
      required document
3) preventing users to give multiple reviews for same tour so we have users id and tour id if same review coming then 
   we can prevent we can create unique compound index

4) geospetial querries inorder to implelment a really cool feature  to provide search tours within a certain distance 
   of a specified path 

5)Lets find the distances of all tours from a certain point using geospetial Aggregation
   for geospetial Aggregation there is only one stage  $geoNear and it requires at least one field with indexing


_____________________________________________________________________________________________________________________________________
1) setting up pug in express :
   we are going to template engine then we use that templates for rendering purpose we can easilly fill up that templates
      app.set('view engine', 'pug');
 we can also use handlebar or ejs but we are  familiar with 
   app.get('/',(req,res)=>{
    res.status(200).render('base')
}) 
it will check in our specified folder which is path.join(views)

2) pug is white space sensitive syntax for writing html
 